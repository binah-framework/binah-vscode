{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Binah",
  "patterns": [
    {
      "include": "#strings"
    },
    {
      "include": "#record_decl"
    },
    {
      "include": "#predicate_decl"
    },
    {
      "include": "#policy_decl"
    },
    {
      "include": "#line_comment"
    },
    {
      "include": "#inline"
    }
  ],
  "repository": {
    "inline": {
      "name": "comment.block",
      "begin": "^(#inline)",
      "captures": {
        "1": {
          "name": "keyword.control.inline.binah"
        }
      }
    },
    "line_comment": {
      "name": "comment.line.double-dash.binah",
      "begin": "--",
      "end": "$"
    },
    "strings": {
      "name": "string.quoted.double.binah",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.binah",
          "match": "\\\\."
        }
      ]
    },
    "policy_ref": {
      "name": "entity.name.function",
      "match": "@[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*"
    },
    "field_name": {
      "name": "variable.other.field.binah",
      "match": "[\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*"
    },
    "predicate_decl": {
      "name": "meta.declaration.predicate.binah",
      "begin": "(predicate)\\s+([\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.predicate.other"
        },
        "2": {
          "name": "entity.name.function"
        }
      },
      "end": "(?x) # Detect end of predicate declaration\n     # Decreasing indentation\n   ^(?!          # Implicit indentation: end match on newline *unless* the new line is either:\n       \\s+\\S    # - more indented, or\n     | \\s*        # - starts with whitespace, followed by:\n       (?: $      #   - the end of the line (i.e. empty line), or\n       |--+       #   - the start of a single-line comment.\n          (?![\\p{S}\\p{P}&&[^(),;\\[\\]{}`_\"']]).*$) # non-symbol\n                  # The double dash may not be followed by other operator characters\n                  # (then it would be an operator, not a comment)\n    )",
      "patterns": [
        {
          "match": "\\b([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.binah"
            }
          }
        }
      ]
    },
    "record_decl": {
      "name": "meta.declaration.record.binah",
      "begin": "^([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.binah"
        }
      },
      "end": "(?x) # Detect end of record declaration\n     # Decreasing indentation\n   ^(?!          # Implicit indentation: end match on newline *unless* the new line is either:\n       \\s+\\S    # - more indented, or\n     | \\s*        # - starts with whitespace, followed by:\n       (?: $      #   - the end of the line (i.e. empty line), or\n       |--+       #   - the start of a single-line comment.\n          (?![\\p{S}\\p{P}&&[^(),;\\[\\]{}`_\"']]).*$) # non-symbol\n                  # The double dash may not be followed by other operator characters\n                  # (then it would be an operator, not a comment)\n    )",
      "patterns": [
        {
          "name": "meta.declaration.field.binah",
          "match": "(?x)\n  ^\\s+([\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)              # Field name\n  \\s+([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)         # Type",
          "captures": {
            "1": {
              "name": "variable.other"
            },
            "2": {
              "name": "storage.type.binah"
            },
            "3": {
              "name": "entity.name.function"
            }
          }
        },
        {
          "match": "^\\s+(assert)",
          "captures": {
            "1": {
              "name": "keyword.other.assert.binah"
            }
          }
        },
        {
          "name": "meta.declaration.$2.binah",
          "begin": "^(\\s+)(?=(read|update|insert))",
          "beginCaptures": {
            "2": {
              "name": "keyword.other.$2.binah"
            }
          },
          "end": "(?x) \n   ^(?!           # End match on newline *unless* the new line is either:\n       \\1\\s+\\S    # - more indented, or\n     | \\s*        # - starts with whitespace, followed by:\n       (?: $      #   - the end of the line (i.e. empty line), or\n       |--+       #   - the start of a single-line comment.\n          (?![\\p{S}\\p{P}&&[^(),;\\[\\]{}`_\"']]).*$) # non-symbol\n                  # The double dash may not be followed by other operator characters\n                  # (then it would be an operator, not a comment)\n    )",
          "patterns": [
            {
              "include": "#policy_ref"
            },
            {
              "include": "#line_comment"
            },
            {
              "name": "meta.declaration.field-list.binah",
              "begin": "(?x)\n  ^\\s+\\[ | (?:read|update|insert)\\s+\\[",
              "end": "\\]",
              "patterns": [
                {
                  "include": "#line_comment"
                },
                {
                  "include": "#field_name"
                }
              ]
            }
          ]
        },
        {
          "include": "#line_comment"
        },
        {
          "include": "#policy_ref"
        }
      ]
    },
    "policy_decl": {
      "name": "meta.declaration.policy.binah",
      "begin": "(policy)\\s+([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.predicate.other"
        },
        "2": {
          "name": "entity.name.function"
        }
      },
      "end": "(?x) \n   ^(?!           # End match on newline *unless* the new line is either:\n       \\s+\\S      # - more indented, or\n     | \\s*        # - starts with whitespace, followed by:\n       (?: $      #   - the end of the line (i.e. empty line), or\n       |--+       #   - the start of a single-line comment.\n          (?![\\p{S}\\p{P}&&[^(),;\\[\\]{}`_\"']]).*$) # non-symbol\n                  # The double dash may not be followed by other operator characters\n                  # (then it would be an operator, not a comment)\n    )"
    }
  },
  "scopeName": "code.binah"
}
