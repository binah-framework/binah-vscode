---
"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Storm
patterns:
  - include: "#strings"
  - include: "#record_decl"
  - include: "#predicate_decl"
  - include: "#policy_decl"
  - include: "#line_comment"
  - include: "#inline"
  - include: "#import"
repository:
  import:
    name: meta.import.storm
    begin: (import)\s+([^.]+)(:?\.([^.\s]+))*\s+
    beginCaptures:
      1: {"name": keyword.other.import.storm}
      2: {"name": entity.name.namespace.storm}
      3: {"name": entity.name.namespace.storm}
    patterns:
      - match: >-
          [\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*
        name: storage.type.storm
    end: $
  inline:
    name: comment.block
    begin: "^(#inline)"
    captures:
      1: { "name": keyword.control.inline.storm}
  line_comment:
    name: comment.line.double-dash.storm
    begin: "--"
    end: $
  strings:
    name: string.quoted.double.storm
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.storm
        match: "\\\\."
  policy_ref:
    name: entity.name.function
    match: >-
      @[\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*
  field_name:
    name: variable.other.field.storm
    match: >-
      [\p{Ll}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*
  predicate_decl:
    name: meta.declaration.predicate.storm
    begin: (predicate)\s+([\p{Ll}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*)
    beginCaptures:
      1: { "name": keyword.other.predicate.other }
      2: { "name": entity.name.function }
    end: >-
      (?x) # Detect end of predicate declaration
           # Decreasing indentation
         ^(?!          # Implicit indentation: end match on newline *unless* the new line is either:
             \s+\S    # - more indented, or
           | \s*        # - starts with whitespace, followed by:
             (?: $      #   - the end of the line (i.e. empty line), or
             |--+       #   - the start of a single-line comment.
                (?![\p{S}\p{P}&&[^(),;\[\]{}`_"']]).*$) # non-symbol
                        # The double dash may not be followed by other operator characters
                        # (then it would be an operator, not a comment)
          )
    patterns:
      - match: \b([\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*)\b
        captures:
          1: { "name": storage.type.storm }
  record_decl:
    name: meta.declaration.record.storm
    begin: ^([\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*)
    beginCaptures:
      1: { "name": storage.type.storm }
    end: >-
      (?x) # Detect end of record declaration
           # Decreasing indentation
         ^(?!          # Implicit indentation: end match on newline *unless* the new line is either:
             \s+\S    # - more indented, or
           | \s*        # - starts with whitespace, followed by:
             (?: $      #   - the end of the line (i.e. empty line), or
             |--+       #   - the start of a single-line comment.
                (?![\p{S}\p{P}&&[^(),;\[\]{}`_"']]).*$) # non-symbol
                        # The double dash may not be followed by other operator characters
                        # (then it would be an operator, not a comment)
          )
    patterns:
      - name: meta.declaration.field.storm
        match: >-
          (?x)
            ^\s+([\p{Ll}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*)              # Field name
            \s+([\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*)         # Type
        captures:
          1: { "name": variable.other }
          2: { "name": storage.type.storm }
          3: { "name": entity.name.function }
      - match: ^\s+(assert)
        captures:
          1: { "name": keyword.other.assert.storm }
      - name: meta.declaration.$2.storm
        # Capture but don't consume so it can be used in the inner patterns
        begin: ^(\s+)(?=(read|update|insert))
        beginCaptures:
          2: { "name": keyword.other.$2.storm }
        end: >-
          (?x)
             ^(?!           # End match on newline *unless* the new line is either:
                 \1\s+\S    # - more indented, or
               | \s*        # - starts with whitespace, followed by:
                 (?: $      #   - the end of the line (i.e. empty line), or
                 |--+       #   - the start of a single-line comment.
                    (?![\p{S}\p{P}&&[^(),;\[\]{}`_"']]).*$) # non-symbol
                            # The double dash may not be followed by other operator characters
                            # (then it would be an operator, not a comment)
              )
        patterns:
          - include: "#policy_ref"
          - include: "#line_comment"
          - name: meta.declaration.field-list.storm
            begin: >-
              (?x)
                ^\s+\[ | (?:read|update|insert)\s+\[
            end: \]
            patterns:
              - include: "#line_comment"
              - include: "#field_name"
      - include: "#line_comment"
      - include: "#policy_ref"
  policy_decl:
    name: meta.declaration.policy.storm
    begin: (policy)\s+([\p{Lu}\p{Lt}][\p{Ll}_\p{Lu}\p{Lt}\p{Nd}']*)
    beginCaptures:
      1: { "name": keyword.other.predicate.other }
      2: { "name": entity.name.function }
    end: >-
      (?x)
         ^(?!           # End match on newline *unless* the new line is either:
             \s+\S      # - more indented, or
           | \s*        # - starts with whitespace, followed by:
             (?: $      #   - the end of the line (i.e. empty line), or
             |--+       #   - the start of a single-line comment.
                (?![\p{S}\p{P}&&[^(),;\[\]{}`_"']]).*$) # non-symbol
                        # The double dash may not be followed by other operator characters
                        # (then it would be an operator, not a comment)
          )

scopeName: code.storm
